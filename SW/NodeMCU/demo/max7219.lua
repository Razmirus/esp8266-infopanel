--------------------------------------------------------------------------------
-- MAX7229 module for NodeMCU
-- SOURCE: https://github.com/marcelstoer/nodemcu-max7219
-- AUTHOR: marcel at frightanic dot com
-- LICENSE: http://opensource.org/licenses/MIT
--------------------------------------------------------------------------------

-- Set module name as parameter of require
local modname = ...
local M = {}
_G[modname] = M
--------------------------------------------------------------------------------
-- Local variables
--------------------------------------------------------------------------------
local debug = false
local numberOfModules
local numberOfColumns
-- ESP8266 pin which is connected to CS of the MAX7219
local slaveSelectPin
-- numberOfModules * 8 bytes for the char representation, left-to-right
local columns = {}

local MAX7219_REG_DECODEMODE = 0x09
local MAX7219_REG_INTENSITY = 0x0A
local MAX7219_REG_SCANLIMIT = 0x0B
local MAX7219_REG_SHUTDOWN = 0x0C
local MAX7219_REG_DISPLAYTEST = 0x0F

--------------------------------------------------------------------------------
-- Local/private functions
--------------------------------------------------------------------------------

local function sendByte(module, register, data)
  -- out("module: " .. module .. " register: " .. register .. " data: " .. data)
  spiRegister = {}
  spiData = {}

  -- set all to 0 by default
  for i = 1, numberOfModules do
    spiRegister[i] = 0
    spiData[i] = 0
  end

  -- set the values for just the affected display
  spiRegister[module] = register
  spiData[module] = data

  -- enable sending data
  gpio.write(slaveSelectPin, gpio.LOW)

  for i = 1, numberOfModules do
    spi.send(1, spiRegister[i] * 256 + spiData[i])
  end

  -- make the chip latch data into the registers
  gpio.write(slaveSelectPin, gpio.HIGH)
end

local function sendRow(register)
  -- enable sending data
  gpio.write(slaveSelectPin, gpio.LOW)

  for i = 1, numberOfModules do
    spi.send(1, register * 256 + columns[(i - 1) * 8 + register])
  end

  -- make the chip latch data into the registers
  gpio.write(slaveSelectPin, gpio.HIGH)
end

local function commit()
    for register = 1, 8 do
        sendRow(register)
    end
end

local function out(msg)
  if debug then
    print("[MAX7219] " .. msg)
  end
end

--------------------------------------------------------------------------------
-- Public functions
--------------------------------------------------------------------------------
-- Configures both the SoC and the MAX7219 modules.
-- @param config table with the following keys (* = mandatory)
--               - numberOfModules*
--               - slaveSelectPin*, ESP8266 pin which is connected to CS of the MAX7219
--               - debug
--               - intensitiy, 0x00 - 0x0F (0 - 15)
function M.setup(config)
  local config = config or {}

  numberOfModules = assert(config.numberOfModules, "'numberOfModules' is a mandatory parameter")
  slaveSelectPin = assert(config.slaveSelectPin, "'slaveSelectPin' is a mandatory parameter")
  numberOfColumns = numberOfModules * 8

  if config.debug then debug = config.debug end

  out("number of modules: " .. numberOfModules .. ", SS pin: " .. slaveSelectPin)

  spi.setup(1, spi.MASTER, spi.CPOL_LOW, spi.CPHA_LOW, 16, 8)
  -- Must NOT be done _before_ spi.setup() because that function configures all HSPI* pins for SPI. Hence,
  -- if you want to use one of the HSPI* pins for slave select spi.setup() would overwrite that.
  gpio.mode(slaveSelectPin, gpio.OUTPUT)
  gpio.write(slaveSelectPin, gpio.HIGH)

  for i = 1, numberOfModules do
    sendByte(i, MAX7219_REG_SCANLIMIT, 7)
    sendByte(i, MAX7219_REG_DECODEMODE, 0x00)
    sendByte(i, MAX7219_REG_DISPLAYTEST, 0)
    -- use 1 as default intensity if not configured
    sendByte(i, MAX7219_REG_INTENSITY, config.intensity and config.intensity or 1)
    sendByte(i, MAX7219_REG_SHUTDOWN, 1)
  end

  M.clear()
end

function M.clear()
  for i = 1, numberOfColumns do
    columns[i] = 0
  end
  commit()
end

function M.print(text)
local font = { 0,0,0,0,0,0,0,0, -- SPACE
             0x10,0x18,0x18,0x18,0x18,0x00,0x18,0x18, -- EXCL
             0x28,0x28,0x08,0x00,0x00,0x00,0x00,0x00, -- QUOT
             0x00,0x0a,0x7f,0x14,0x28,0xfe,0x50,0x00, -- #
             0x10,0x38,0x54,0x70,0x1c,0x54,0x38,0x10, -- $
             0x00,0x60,0x66,0x08,0x10,0x66,0x06,0x00, -- %
             0,0,0,0,0,0,0,0, -- &
             0x00,0x10,0x18,0x18,0x08,0x00,0x00,0x00, -- '
             0x02,0x04,0x08,0x08,0x08,0x08,0x08,0x04, -- (
             0x40,0x20,0x10,0x10,0x10,0x10,0x10,0x20, -- )
             0x00,0x10,0x54,0x38,0x10,0x38,0x54,0x10, -- *
             0x00,0x08,0x08,0x08,0x7f,0x08,0x08,0x08, -- +
             0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x08, -- COMMA
             0x00,0x00,0x00,0x00,0x7e,0x00,0x00,0x00, -- -
             0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06, -- DOT
             0x00,0x04,0x04,0x08,0x10,0x20,0x40,0x40, -- /
             0x00,0x38,0x44,0x4c,0x54,0x64,0x44,0x38, -- 0
             0x04,0x0c,0x14,0x24,0x04,0x04,0x04,0x04, -- 1
             0x00,0x30,0x48,0x04,0x04,0x38,0x40,0x7c, -- 2
             0x00,0x38,0x04,0x04,0x18,0x04,0x44,0x38, -- 3
             0x00,0x04,0x0c,0x14,0x24,0x7e,0x04,0x04, -- 4
             0x00,0x7c,0x40,0x40,0x78,0x04,0x04,0x38, -- 5
             0x00,0x38,0x40,0x40,0x78,0x44,0x44,0x38, -- 6
             0x00,0x7c,0x04,0x04,0x08,0x08,0x10,0x10, -- 7
             0x00,0x3c,0x44,0x44,0x38,0x44,0x44,0x78, -- 8
             0x00,0x38,0x44,0x44,0x3c,0x04,0x04,0x78, -- 9
             0x00,0x18,0x18,0x00,0x00,0x18,0x18,0x00, -- :
--[[]
             0x00,0x18,0x18,0x00,0x00,0x18,0x18,0x08, -- ;
             0x00,0x10,0x20,0x40,0x80,0x40,0x20,0x10, -- <
             0x00,0x00,0x7e,0x00,0x00,0xfc,0x00,0x00, -- =
             0x00,0x08,0x04,0x02,0x01,0x02,0x04,0x08, -- >
             0x00,0x38,0x44,0x04,0x08,0x10,0x00,0x10, -- ?
             0x00,0x30,0x48,0xba,0xba,0x84,0x78,0x00, -- @
             0x00,0x1c,0x22,0x42,0x42,0x7e,0x42,0x42, -- A
             0x00,0x78,0x44,0x44,0x78,0x44,0x44,0x7c, -- B
             0x00,0x3c,0x44,0x40,0x40,0x40,0x44,0x7c, -- C
             0x00,0x7c,0x42,0x42,0x42,0x42,0x44,0x78, -- D
             0x00,0x78,0x40,0x40,0x70,0x40,0x40,0x7c, -- E
             0x00,0x7c,0x40,0x40,0x78,0x40,0x40,0x40, -- F
             0x00,0x3c,0x40,0x40,0x5c,0x44,0x44,0x78, -- G
             0x00,0x42,0x42,0x42,0x7e,0x42,0x42,0x42, -- H
             0x00,0x7c,0x10,0x10,0x10,0x10,0x10,0x7e, -- I
             0x00,0x7e,0x02,0x02,0x02,0x02,0x04,0x38, -- J
             0x00,0x44,0x48,0x50,0x60,0x50,0x48,0x44, -- K
             0x00,0x40,0x40,0x40,0x40,0x40,0x40,0x7c, -- L
             0x00,0x82,0xc6,0xaa,0x92,0x82,0x82,0x82, -- M
             0x00,0x42,0x42,0x62,0x52,0x4a,0x46,0x42, -- N
             0x00,0x3c,0x42,0x42,0x42,0x42,0x44,0x38, -- O
             0x00,0x78,0x44,0x44,0x48,0x70,0x40,0x40, -- P
             0x00,0x3c,0x42,0x42,0x52,0x4a,0x44,0x3a, -- Q
             0x00,0x78,0x44,0x44,0x78,0x50,0x48,0x44, -- R
             0x00,0x38,0x40,0x40,0x38,0x04,0x04,0x78, -- S
             0x00,0x7e,0x90,0x10,0x10,0x10,0x10,0x10, -- T
             0x00,0x42,0x42,0x42,0x42,0x42,0x42,0x3e, -- U
             0x00,0x42,0x42,0x42,0x42,0x44,0x28,0x10, -- V
             0x80,0x82,0x82,0x92,0x92,0x92,0x94,0x78, -- W
             0x00,0x42,0x42,0x24,0x18,0x24,0x42,0x42, -- X
             0x00,0x44,0x44,0x28,0x10,0x10,0x10,0x10, -- Y
--]]
             0x00,0x7c,0x04,0x08,0x7c,0x20,0x40,0xfe  -- Z
}
  local c = {}
  for i = 1, #text do
    local char = text:byte(i) - 32
    if char < 0 or char > 60 then char = 0 end
    for j = 1,8 do
        table.insert(c, font[char * 8 + j])
    end
  end

  columns = c
  commit()
end

-- Sets the brightness of the display.
-- intensity: 0x00 - 0x0F (0 - 15)
function M.setIntensity(intensity)
  for i = 1, numberOfModules do
    sendByte(i, MAX7219_REG_INTENSITY, intensity)
  end
end

-- Turns the display on or off.
-- shutdown: true=turn off, false=turn on
function M.shutdown(shutdown)
  local shutdownReg = shutdown and 0 or 1

  for i = 1, numberOfModules do
    sendByte(i, MAX7219_REG_SHUTDOWN, shutdownReg)
  end
end

return M